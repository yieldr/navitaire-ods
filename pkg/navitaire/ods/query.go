// Code generated by go-bindata.
// sources:
// query.sql
// DO NOT EDIT!

package ods

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _querySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xdd\x6e\xab\x38\x10\xbe\xe7\x29\x7c\x99\xac\x72\x90\xce\x39\x97\xdd\xac\x4a\x81\x6c\xd3\x4d\xa1\x82\x74\xab\x5e\x45\x8e\x33\xa4\xce\x12\x83\x8c\x89\x94\xb7\x5f\xd9\xfc\xc4\x86\x90\x36\x5a\x6d\xb5\x95\x96\x3b\xcf\x7c\xf3\xe3\x99\xf1\x37\x78\xbe\xbb\x70\x22\x1f\xdd\x12\xcc\x39\x05\xbe\x22\xd9\x06\xd0\x9f\x4e\xe4\xde\x3b\xd1\xe8\xc7\x18\x4d\xd1\x6d\xfe\xfd\xc6\x3a\xe1\x4a\xce\x81\x91\x23\x52\x80\x9f\x15\xe0\xc7\x8d\x65\xc5\xfe\xc2\x77\x97\x16\x42\xd4\x76\x2b\x5f\xae\x74\xa5\x3e\x27\x46\xb5\xff\x89\x02\x78\x90\x63\x2e\x4a\x0e\xb1\xc0\x82\x66\x4c\x02\x32\x4e\xb7\x94\x55\x7a\x87\x73\x7a\xc0\x69\xa3\x55\x0e\x36\x50\x08\xca\x94\xa0\x02\xcd\x52\xba\x7d\x13\x41\xb9\x5f\x03\x6f\xa2\x24\x4a\xb6\x62\x4a\x58\xc1\xe2\xa5\x87\x8c\x4f\xfa\xc2\x02\x56\x9b\x26\x89\x1a\x07\x58\x14\x71\x96\x6e\x34\x5c\x21\x65\xab\x22\x4b\x37\x1a\xc6\x39\x60\x9a\xe2\x75\x0a\x3a\x06\x37\x42\x09\xe4\x76\x04\x07\x60\x25\x18\x41\x79\x25\x93\x00\xdc\x47\x38\x31\xc2\x8c\xd0\x34\xc5\xfc\xb8\xaa\xa1\xd6\x2c\x0a\x1f\xd1\xc8\xaa\x21\x6d\x85\xeb\x8f\xa6\x7a\xa5\x27\x86\xa2\x5b\x61\x53\x6b\xd6\xd7\xd4\xe9\x65\x35\x35\xf1\xd2\xd3\x04\xf1\xf3\xe3\x88\x12\xdb\x4d\x71\xa1\xca\x36\x46\xbd\x32\xb7\x25\xed\x44\xdf\xec\xca\x42\xc0\xc6\xc5\x39\x26\x54\x1c\xd1\xb7\x33\xce\x1a\xf3\xb6\xda\x8d\x0b\x55\x93\x39\x3b\x00\x13\x19\x3f\x2e\x60\x2b\xa1\x34\x3d\x45\x98\x07\x81\x1f\xa1\x87\x70\x1e\x18\x30\xe5\x5b\x61\x09\x7a\x99\x2f\xef\xd1\x08\x05\xe1\x22\x74\xff\x40\x63\x4b\x4b\x3b\x0c\x64\x8a\xba\xe1\xdc\x43\x53\x44\x49\x47\xd6\xd8\xbc\xdc\xfb\x91\x3f\xd4\x13\xf9\x38\xf4\x87\x75\xc2\x39\x81\xa7\x4a\x2a\xb0\x28\x0b\xf4\xeb\x14\x7d\x6f\x74\xbf\x47\xe1\xf3\x13\xba\x7b\xfd\xb7\xfb\x6c\x76\xf3\x62\xe3\xbb\x0d\xab\x94\xaa\x47\xd4\xd2\x0b\x6e\xa1\x7a\x5a\x8d\x51\x3d\x9f\xff\x85\xe4\x07\x33\x1f\xc8\xd2\xbc\x8d\x9c\xa5\x7c\x47\x6c\xf7\x0d\xf3\x2d\x38\xfb\xac\x64\x02\xfd\x82\x08\xb1\xdd\x8c\x1d\x80\x17\x34\x63\x11\x16\xa0\xf2\xaf\x9f\xa1\xd5\x4e\xd6\x5d\x96\xfd\x45\x99\x1a\xaa\xb5\xd5\x1b\xa8\x5a\xfb\x84\x8b\x02\xd8\x16\xb8\x82\xe5\x83\xf3\x14\x06\x68\x6d\xd7\x36\x6a\x8c\xd6\xf9\xe9\xd8\xf7\xde\xba\x7d\xc8\x4a\xce\xe0\x18\xc3\x76\x0f\x4c\xc8\x20\xf9\xae\xb8\x18\x25\xb7\x5b\x63\x15\x28\xdf\x15\xba\xe4\xfd\x58\x55\xb5\xaa\x50\xc3\x0f\x24\x0c\xba\x9e\x55\x2c\x72\x26\x56\x3b\xe6\xd2\xa0\xbe\x49\x0b\x6f\xcf\xfd\xc4\xdc\x66\xc1\xc8\xa5\xa1\x07\x26\x76\xa3\xaa\x9f\x96\x6a\xb2\x26\x1a\xf6\x75\x6a\xbc\xf2\x6a\xba\x25\xf6\x8c\x67\xfb\x8e\xef\xb3\x9e\xdb\x2b\x11\x62\x2f\xb3\x8e\x45\xbb\x19\xdf\xaf\x75\x4d\x5a\xf9\x2e\xbd\xb6\xd0\xe9\x75\x85\x4e\x2f\x15\xba\xcf\xa1\x97\xb3\x39\xc7\x8a\x5d\x59\x3f\xa5\xd4\x5e\xc0\xb6\x5e\xd2\xca\xa0\x3d\x2a\xac\x4e\x9f\x1f\xe2\xce\x01\xe2\xec\xb0\xe6\x27\x51\x8e\x55\xb3\x60\x75\x17\xb9\x3a\x3a\x37\xe0\xfa\xd9\xd2\x0a\x73\xe6\x1f\x48\xa2\xbb\x42\xd3\xa4\xf3\x5b\x24\x0d\x4c\x91\x09\x37\x7e\x90\x24\x58\x17\x98\x50\xf9\x93\x24\x11\xd5\x9d\xfe\x8b\x84\x9e\x7c\x69\x42\x9f\x41\x45\xad\xc9\x75\x24\x9e\x7c\x90\xc3\x67\x00\x1a\x7f\x27\x97\xf9\x3b\xe9\x45\xb9\x4c\xdf\x89\x3d\x03\x68\xa7\x48\xa2\xdb\xf3\x3f\x62\xef\xe4\x8b\xb2\xf7\x67\x6e\xe5\x2f\xb9\x29\x92\xff\x17\x45\x6f\x51\x34\x9b\x02\x0f\xae\x0a\x7c\xdd\xae\xc0\x57\x2f\x0b\x7c\xd5\xb6\xc0\xef\xaf\x0b\x5c\xed\x0b\xd5\x99\x5a\xf8\xdb\x14\x79\xce\xd2\x77\x3c\x6f\xe4\x39\xaf\x13\xf4\xed\xe7\x04\x55\x2f\x4b\xac\x04\xdd\x43\x21\xf0\x3e\x1f\xdf\x58\x7f\x07\x00\x00\xff\xff\x34\x26\x49\x55\x77\x10\x00\x00")

func querySqlBytes() ([]byte, error) {
	return bindataRead(
		_querySql,
		"query.sql",
	)
}

func querySql() (*asset, error) {
	bytes, err := querySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.sql", size: 4215, mode: os.FileMode(420), modTime: time.Unix(1540401085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.sql": querySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.sql": &bintree{querySql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

