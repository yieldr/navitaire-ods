// Code generated by go-bindata.
// sources:
// query.sql
// DO NOT EDIT!

package ods

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _querySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x51\x6f\x9b\x30\x10\x7e\xe7\x57\xf8\x31\x95\x3a\xa4\xee\xb5\xab\x54\x4a\xc8\x9a\x2e\x85\x0a\xd2\x55\x7b\x8a\x1c\x72\x50\x67\xae\x41\xc6\x89\x94\x7f\x3f\xd9\x18\x6a\x43\xa0\xcd\xc3\xa6\x56\x1a\x6f\xbe\xfb\xee\xee\xf3\xf9\xfc\xe1\x69\xe0\x2f\xbc\x38\x40\xd7\x29\xe6\x9c\x00\x5f\xa5\xc5\x06\xd0\x4f\x2f\xf6\x6f\xbd\x78\xf2\xf5\x0c\x5d\xa1\xeb\xf2\xe2\xd2\x71\x92\x60\x11\xf8\x4b\x07\x21\xe2\xfa\x35\xd4\x97\x48\xf5\x79\x09\xd2\xe1\xe7\x0a\x30\x85\x12\x73\xb1\xe3\x90\x08\x2c\x48\xc1\x24\xa0\xe0\x24\x27\xac\xf6\x7b\x9c\x93\x3d\xa6\x8d\x57\x25\xd8\x40\x25\x08\x53\x86\x1a\x34\xa3\x24\x7f\x16\xe1\xee\x65\x0d\xbc\xa9\x92\x29\xdb\x8a\x29\x63\x0d\x4b\x96\x53\x64\x7d\x32\x17\x16\xb0\xda\x34\x24\x34\x0e\xb0\xa8\x92\x82\x6e\x0c\x5c\x25\x6d\xab\xaa\xa0\x1b\x03\xe3\xed\x31\xa1\x78\x4d\xc1\xc4\xe0\xc6\x28\x81\xdc\x8d\x61\x0f\x6c\x07\x56\x51\x5e\xdb\x24\x00\xf7\x11\x5e\x82\x30\x4b\x09\xa5\x98\x1f\x56\x1a\xea\xcc\xe2\xe8\x1e\x4d\x1c\x0d\x69\x3b\xac\x3f\x42\xcd\x4e\x9f\x5b\x8e\x6e\x87\x6d\xaf\xdd\x5f\xdb\x67\xb6\xd5\xf6\x24\xcb\xa9\x61\x48\x1e\xef\x27\x24\x75\x7d\x8a\x2b\xd5\xb6\x33\xd4\x6b\x73\xdb\xd2\xf3\x0e\xe9\x12\xa7\x44\x1c\xd0\x97\x23\x49\x9a\xb0\xb6\xcb\x4d\xa8\xea\xc5\x9c\xed\x81\x89\x82\x1f\x16\x90\x4b\x28\xa1\xaf\x99\xe7\x61\x18\xc4\xe8\x2e\x9a\x87\x16\x4c\xe5\x56\xd8\x14\x3d\xcd\x97\xb7\x68\x82\xc2\x68\x11\xf9\x3f\xd0\x99\x63\xd0\x8d\x42\x49\xcd\x0c\x9c\x4f\xd1\x15\x22\x69\xc7\xd6\xc4\x3c\xdd\x06\x71\x30\x74\x16\xf2\x52\x98\xf7\xe5\x15\xe7\x85\x53\xd5\x4a\x81\xc5\xae\x42\xdf\xae\xd0\x45\xe3\xfb\x1e\x47\x8f\x0f\xe8\xe6\xd7\xdf\x3e\x5f\xfb\x14\x47\x0f\xbc\x39\xa8\xda\xa8\xce\x86\x38\x66\xa3\x1d\xa4\xa7\xd3\x1a\xcd\xe3\xbc\x47\x48\x0f\x32\x1e\x60\x67\xef\x42\xce\x50\xb9\x4d\x5d\xff\x19\xf3\x1c\xbc\x97\x62\xc7\x84\xe2\xaa\xaf\x98\xd3\x4e\xcf\x4d\x51\xfc\x26\x4c\x0d\xce\xda\xe9\x0d\x8d\xf6\x3e\xe0\xaa\x02\x96\x03\x57\xb0\x72\x70\x66\xa2\x10\xad\x5d\x1d\xa3\x46\x65\x5d\xbe\x2e\xfb\xd9\xdb\xb4\x77\xc5\x8e\x33\x38\x24\x90\xbf\x00\x13\xb2\x48\xb9\xad\x46\xab\x94\x6e\x1b\xac\x0a\x95\xdb\xca\xb4\xbc\x5d\xab\xee\x4c\x5d\x6a\xf8\x12\x44\x61\x37\xb3\xaa\x95\x1e\xa9\xd5\x8e\xb2\x0c\xd0\x3b\x69\xe1\xed\xfa\x6d\x62\xfa\x16\x97\x5b\x7a\x2a\x2b\x7a\x1a\x2b\x3a\xc6\xaa\x2f\x2a\xe3\x6c\x8e\xc9\x44\xd7\xd6\xa7\x44\xdd\x05\xe4\xfa\x6f\xa5\x02\xda\xa5\xc2\x9a\x7a\xf2\x2e\x31\x19\x50\x92\x8e\x8c\xfc\xa3\xbb\xe8\x68\x79\xa8\xf7\x22\xb5\xb4\xb3\x03\x6e\xae\x1d\xa3\x31\x47\x1e\x03\x12\xdd\x35\xda\x21\x9d\xf7\x81\x0c\xb0\x4d\x36\xdc\x7a\x29\x48\xb0\x69\xb0\xa1\xf2\xb5\x20\x11\xf5\x9e\x3e\xa2\xd2\x65\x9f\x46\xe9\x66\x50\x6b\x4e\x76\x9a\xba\x65\xef\x14\xb7\x19\x80\x21\x6c\xd9\xb8\xb0\x65\xbd\x2a\xe3\xba\x96\xb9\x33\x80\x76\x62\x24\xba\x5d\x7f\x2c\x6d\xff\x94\x12\x9a\xfd\x57\xd0\x9e\x82\x36\x12\x8a\x07\x35\x14\x9f\x26\xa2\xf8\x64\x15\xc5\x27\xc9\x28\x7e\x5b\x47\xb1\x12\xd2\x4b\xe7\x4f\x00\x00\x00\xff\xff\x68\x14\x03\x74\x45\x0e\x00\x00")

func querySqlBytes() ([]byte, error) {
	return bindataRead(
		_querySql,
		"query.sql",
	)
}

func querySql() (*asset, error) {
	bytes, err := querySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.sql", size: 3653, mode: os.FileMode(420), modTime: time.Unix(1523549630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.sql": querySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.sql": &bintree{querySql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

