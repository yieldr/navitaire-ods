// Code generated by go-bindata.
// sources:
// query.sql
// DO NOT EDIT!

package ods

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _querySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x51\x6f\x9b\x30\x10\x7e\xe7\x57\xf8\x31\x91\x52\xa4\x6e\x8f\x5d\xa6\x52\x20\x6b\xba\x14\x2a\x48\x57\xf5\x29\x72\xc8\x91\x3a\x73\x00\x19\x27\x52\xfe\xfd\x64\x63\xa8\x0d\x09\x6d\x1e\x36\xb5\xd2\x78\xf3\xdd\x77\x77\x9f\xcf\xe7\x0f\x7b\xbe\x3b\x73\x22\x1f\x5d\x27\x98\x31\x02\x6c\x91\xe4\x2b\x40\xbf\x9c\xc8\xbd\x75\xa2\xc1\x97\x21\x1a\xa3\xeb\xe2\xf2\xca\xb2\x62\x7f\xe6\xbb\x73\x0b\x21\x62\xbb\x15\xd4\x15\x48\xf9\x39\x31\x52\xe1\x23\x09\xf0\xa0\xc0\x8c\xef\x18\xc4\x1c\x73\x92\x67\x02\x90\x33\xb2\x26\x59\xe5\x77\x18\x23\x7b\x4c\x6b\xaf\x4c\xb0\x82\x92\x93\x4c\x1a\x2a\xd0\x84\x92\xf5\x0b\x0f\x76\xdb\x25\xb0\xba\x4a\x2a\x6d\x8b\x4c\x1a\x2b\x58\x3c\xf7\x90\xf1\x89\x5c\x98\xc3\x62\x55\x93\x50\x38\xc0\xbc\x8c\x73\xba\xd2\x70\xa5\xb0\x2d\xca\x9c\xae\x34\x8c\xb3\xc7\x84\xe2\x25\x05\x1d\x83\x6b\xa3\x00\x32\x3b\x82\x3d\x64\x3b\x30\x8a\xb2\xca\x26\x00\xb8\x8b\x70\x62\x84\xb3\x84\x50\x8a\xd9\x61\xa1\xa0\xd6\x24\x0a\xef\xd1\xc0\x52\x90\xa6\xc3\xea\x23\x54\xef\xf4\xc8\x70\xb4\x3b\x6c\x7a\xcd\xfe\x9a\x3e\xbd\xad\xa6\x27\x9e\x7b\x9a\x21\x7e\xbc\x1f\x90\xc4\x76\x29\x2e\x65\xdb\x86\xa8\xd3\xe6\xa6\xa5\xa3\x16\xe9\x02\x27\x84\x1f\xd0\xc5\x91\x24\x75\x58\xd3\xe5\x3a\x54\xf6\x62\x9a\xed\x21\xe3\x39\x3b\xcc\x60\x2d\xa0\x84\xbe\x66\x9e\x06\x81\x1f\xa1\xbb\x70\x1a\x18\x30\x99\x5b\x62\x13\xf4\x34\x9d\xdf\xa2\x01\x0a\xc2\x59\xe8\xfe\x44\x43\x4b\xa3\x1b\x06\x82\x9a\x1e\x38\xf5\xd0\x18\x91\xa4\x65\xab\x63\x9e\x6e\xfd\xc8\x3f\x75\x16\xe2\x52\xe8\xf7\xe5\x15\xe7\x04\x9e\x6c\x25\xc7\x7c\x57\xa2\x6f\x63\x74\x59\xfb\x7e\x44\xe1\xe3\x03\xba\x79\xfe\xdb\xe7\x6b\x9e\x62\xef\x81\xd7\x07\x55\x19\xe5\xd9\x10\x4b\x6f\xb4\x85\xd4\x74\x1a\xa3\x79\x9c\x77\x0f\xe9\x93\x8c\x4f\xb0\x33\x77\x21\x66\xa8\xd8\x24\xb6\xfb\x82\xd9\x1a\x9c\x6d\xbe\xcb\xb8\xe4\xaa\xae\x98\xd5\x4c\xcf\x4d\x9e\xff\x26\x99\x1c\x9c\xa5\xd5\x19\x1a\xe5\x7d\xc0\x65\x09\xd9\x1a\x98\x84\x15\x27\x67\x26\x0c\xd0\xd2\x56\x31\x72\x54\x96\xc5\xeb\xb2\x9b\xbd\x49\x7b\x97\xef\x58\x06\x87\x18\xd6\x5b\xc8\xb8\x28\x52\x6c\xca\xde\x2a\x85\xdd\x04\xcb\x42\xc5\xa6\xd4\x2d\x6f\xd7\xaa\x3a\x53\x95\x3a\x7d\x09\xc2\xa0\x9d\x59\xd6\x4a\x8e\xd4\x6a\x46\x59\x04\xa8\x9d\x34\xf0\x66\xfd\x36\x31\x75\x8b\x8b\x0d\x3d\x97\x15\x3d\x8f\x15\xed\x63\xd5\x15\x95\x7e\x36\xc7\x64\xa2\x6d\xeb\x52\xa2\xf6\x0c\xd6\xea\x6f\x25\x03\x9a\xa5\xc4\xea\x7a\xf2\x2e\x31\x39\xa1\x24\x2d\x19\xf9\x47\x77\xd1\x52\xf2\x50\xed\x45\x68\x69\x6b\x07\x4c\x5f\x5b\x5a\x63\x8e\x3c\x06\x04\xba\x6d\x34\x43\x5a\xef\x03\x11\x60\x9a\x4c\xb8\xf1\x52\x10\x60\xdd\x60\x42\xc5\x6b\x41\x20\xaa\x3d\x7d\x44\xa5\x4b\x3f\x8d\xd2\x4d\xa0\xd2\x9c\xf4\x3c\x75\x4b\xdf\x29\x6e\x13\x00\x4d\xd8\xd2\x7e\x61\x4b\x3b\x55\xfa\x75\x2d\xb5\x27\x00\xcd\xc4\x08\x74\xb3\xfe\x58\xda\xfe\x29\x25\x34\xfd\xaf\xa0\x1d\x05\xad\x25\x14\x9f\xd4\x50\x7c\x9e\x88\xe2\xb3\x55\x14\x9f\x25\xa3\xf8\x6d\x1d\xc5\x95\x90\xca\x93\x51\xc6\xef\x63\xe4\x39\x73\xdf\xf1\xbc\x81\xe7\x3c\x8f\xd0\xc5\xd7\x11\x4a\x76\x8c\x41\xc6\x17\x9c\x6c\xa1\xe4\x78\x5b\x0c\xaf\xac\x3f\x01\x00\x00\xff\xff\xfd\x4b\xb0\x68\x78\x0e\x00\x00")

func querySqlBytes() ([]byte, error) {
	return bindataRead(
		_querySql,
		"query.sql",
	)
}

func querySql() (*asset, error) {
	bytes, err := querySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.sql", size: 3704, mode: os.FileMode(420), modTime: time.Unix(1535641283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.sql": querySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.sql": &bintree{querySql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

