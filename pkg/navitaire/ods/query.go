// Code generated by go-bindata.
// sources:
// query.sql
// DO NOT EDIT!

package ods

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _querySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x6f\xc2\x36\x14\x7d\xcf\xaf\xf0\x23\x4c\x34\x52\xdb\xc7\x8e\xa9\x69\x12\x56\x3a\x9a\x54\x09\x5d\xd5\x27\x64\xcc\x0d\x35\x0b\x4e\xe4\x18\x24\xfe\xfd\x64\xe7\x03\x3b\x21\xb4\x68\x5a\xb5\x4a\xcb\x9b\xaf\xcf\xfd\xf0\xf1\xf5\xb9\xf1\x7c\x77\xe6\x44\x3e\xba\x27\x98\x73\x0a\x7c\x41\xb2\x15\xa0\x3f\x9d\xc8\x7d\x74\xa2\xc1\xcd\x10\x8d\xd1\x7d\x7e\x7d\x67\x1d\x71\x3b\xce\x81\x91\x03\x52\x80\xdb\x12\x70\x73\x67\x59\xb1\x3f\xf3\xdd\xb9\x85\x10\xb5\xdd\x32\x96\x2b\x43\xa9\xcf\x89\x51\x15\x7f\xa4\x00\x1e\xe4\x98\x8b\x1d\x87\x58\x60\x41\x33\x26\x01\x19\xa7\x6b\xca\xca\x7d\x87\x73\xba\xc7\x69\xbd\xab\x02\xac\xa0\x10\x94\x29\x43\x09\x9a\xa4\x74\xfd\x21\x82\xdd\x76\x09\xbc\xce\x92\x28\xdb\x82\x29\x63\x09\x8b\xe7\x1e\x32\x3e\x19\x0b\x0b\x58\xac\xea\x22\x2a\x1c\x60\x51\xc4\x59\xba\xd2\x70\x85\xb4\x2d\x8a\x2c\x5d\x69\x18\x67\x8f\x69\x8a\x97\x29\xe8\x18\x5c\x1b\x25\x90\xdb\x11\xec\x81\xed\xc0\x48\xca\x4b\x9b\x04\xe0\x2e\xc2\x89\x11\x66\x84\xa6\x29\xe6\x87\x45\x05\xb5\x26\x51\xf8\x8c\x06\x56\x05\x69\x18\xae\x3e\x9a\xea\x4c\x8f\x8c\x8d\x36\xc3\xe6\xae\xc9\xaf\xb9\xa7\xd3\x6a\xee\xc4\x73\x4f\x33\xc4\xaf\xcf\x03\x4a\x6c\x37\xc5\x85\xa2\x6d\x88\x3a\x34\x37\x94\x8e\x5a\x45\xe7\x98\x50\x71\x40\x57\x27\x82\xd4\x6e\x0d\xcb\xb5\xab\xe2\x62\xca\xf6\xc0\x44\xc6\x0f\x33\x58\x4b\x28\x4d\x8f\x91\xa7\x41\xe0\x47\xe8\x29\x9c\x06\x06\x4c\xc5\x56\x58\x82\xde\xa6\xf3\x47\x34\x40\x41\x38\x0b\xdd\x3f\xd0\xd0\xd2\xca\x0d\x03\x59\x9a\xee\x38\xf5\xd0\x18\x51\xd2\xb2\xd5\x3e\x6f\x8f\x7e\xe4\xf7\xdd\x85\x7c\x14\xfa\x83\x3a\xe2\x9c\xc0\x53\x54\x0a\x2c\x76\x05\xfa\x75\x8c\xae\xeb\xbd\xdf\xa3\xf0\xf5\x05\x3d\xbc\xff\xdb\xf7\x6b\xde\xe2\xd9\x0b\xaf\x2f\xaa\x34\xaa\xbb\xa1\x96\x4e\xb4\x85\xaa\xee\x34\x5a\xf3\x74\xdd\x67\x8a\xee\xad\xb8\xa7\x3a\xf3\x14\xb2\x87\xf2\x0d\xb1\xdd\x0f\xcc\xd7\xe0\x6c\xb3\x1d\x13\xe8\x17\x44\x88\xed\x66\x6c\x0f\xbc\xa0\x19\x8b\xb0\x00\x55\x7f\xf5\xec\xac\xa6\xa3\x1e\xb2\xec\x2f\xca\x54\x33\x2d\xad\x4e\x23\x55\xbb\x2f\xb8\x28\x80\xad\x81\x2b\x58\xde\xdb\x47\x61\x80\x96\x76\xe5\xa3\xda\x67\x99\x1f\x97\xdd\xe8\x4d\xd8\xa7\x6c\xc7\x19\x1c\x62\x58\x6f\x81\x09\x99\x24\xdf\x14\x67\xb3\xe4\x76\xe3\xac\x12\xe5\x9b\x42\xb7\x7c\x9e\xab\x64\xab\x4c\xd5\xff\x30\xc2\xa0\x1d\x59\xe5\x22\x27\x72\x35\xed\x2d\x1d\xaa\x93\x34\xf0\x66\xdd\x2d\xcc\xad\x07\x8a\x1c\x12\x7a\x62\x62\xd7\x5b\xd5\x93\x52\x97\xac\x99\xfa\x63\x1d\x2f\x5e\x45\x35\xc3\x12\x7b\xc2\xb3\x6d\x2b\xf6\xc9\xc8\xcd\x91\x08\xb1\xe7\x59\xcb\xa3\x99\x84\x9f\x73\x5d\x89\x55\xbe\x49\x2f\x25\x3a\xbd\x8c\xe8\xf4\x1c\xd1\x5d\xed\x3c\x5f\xcd\x29\x35\x6c\xdb\xba\x25\xa5\xf6\x0c\xd6\xd5\x50\x56\x0e\xcd\x52\x61\x75\xd9\xfc\x92\x66\xf6\x08\x66\x4b\x2d\xbf\x49\x72\xac\x4a\x05\xcb\xb3\xc8\x91\xd1\x3a\x01\xd7\xd7\x96\x46\xcc\x89\x7f\x1e\x89\x6e\x1b\x4d\x97\xd6\x6f\x90\x74\x30\x4d\x26\xdc\xf8\x21\x92\x60\xdd\x60\x42\xe5\x4f\x91\x44\x94\x67\xfa\x2f\x0a\x7a\xf2\xa3\x05\x7d\x02\xa5\xb4\x26\x97\x89\x78\xf2\x45\x0d\x9f\x00\x68\xfa\x9d\x9c\xd7\xef\xa4\x93\xe5\xbc\x7c\x27\xf6\x04\xa0\xe9\x22\x89\x6e\xd6\xff\x48\xbd\x93\x1f\xaa\xde\xdf\x39\x95\x7f\xe4\xa4\x48\xfe\x1f\x14\x9d\x41\x51\x4f\x0a\xdc\x3b\x2a\xf0\x65\xb3\x02\x5f\x3c\x2c\xf0\x45\xd3\x02\x7f\x3e\x2e\x70\x39\x2f\xd4\xcd\x54\xc6\xdf\xc6\xc8\x73\xe6\xbe\xe3\x79\x03\xcf\x79\x1f\xa1\xab\xdb\x11\x2a\x5f\x96\x58\x08\xba\x85\x42\xe0\x6d\x3e\xbc\xb3\xfe\x0e\x00\x00\xff\xff\x0d\xd0\xc4\xd5\x67\x10\x00\x00")

func querySqlBytes() ([]byte, error) {
	return bindataRead(
		_querySql,
		"query.sql",
	)
}

func querySql() (*asset, error) {
	bytes, err := querySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "query.sql", size: 4199, mode: os.FileMode(420), modTime: time.Unix(1536942049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"query.sql": querySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"query.sql": &bintree{querySql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

